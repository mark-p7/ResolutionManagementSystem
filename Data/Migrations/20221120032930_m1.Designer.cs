// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResolutionManagement.Data;

#nullable disable

namespace ResolutionManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221120032930_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ResolutionManagement.Models.FeedbackRequest", b =>
                {
                    b.Property<int?>("FeedbackRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FeedbackRequestId"), 1L, 1);

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ESignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResolutionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Resolved")
                        .HasColumnType("bit");

                    b.HasKey("FeedbackRequestId");

                    b.HasIndex("ResolutionId");

                    b.ToTable("FeedbackRequest", (string)null);

                    b.HasData(
                        new
                        {
                            FeedbackRequestId = 0,
                            Accepted = true,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(90),
                            Description = "sure",
                            ESignature = "jane",
                            OwnerUserID = "37c1ba03-d67c-437e-ac19-2b38b123c55a",
                            ResolutionId = 0,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 2,
                            Accepted = true,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(90),
                            Description = "Why not",
                            ESignature = "bob",
                            OwnerUserID = "d34e5684-030b-4bf1-ba0b-51c424468294",
                            ResolutionId = 0,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 3,
                            Accepted = true,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(90),
                            Description = "Sounds good",
                            ESignature = "shawn",
                            OwnerUserID = "c5955b95-5492-4c7b-a3cb-c749c85e3a16",
                            ResolutionId = 0,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 4,
                            Accepted = true,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(100),
                            Description = "i like this",
                            ESignature = "emily",
                            OwnerUserID = "5559d343-5062-4cd1-b0ae-25301e70a10d",
                            ResolutionId = 0,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 5,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(100),
                            Description = "This Resolution can be improved",
                            ESignature = "jane",
                            OwnerUserID = "37c1ba03-d67c-437e-ac19-2b38b123c55a",
                            ResolutionId = 1,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 7,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(100),
                            Description = "This won't work",
                            ESignature = "bob",
                            OwnerUserID = "d34e5684-030b-4bf1-ba0b-51c424468294",
                            ResolutionId = 1,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 8,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(100),
                            Description = "I don't like this idea",
                            ESignature = "shawn",
                            OwnerUserID = "c5955b95-5492-4c7b-a3cb-c749c85e3a16",
                            ResolutionId = 1,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 9,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(110),
                            Description = "I don't think we should go through with this",
                            ESignature = "emily",
                            OwnerUserID = "5559d343-5062-4cd1-b0ae-25301e70a10d",
                            ResolutionId = 1,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 11,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(110),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "221fedc9-3ad4-492e-bfc0-20f198923a24",
                            ResolutionId = 2,
                            Resolved = false
                        },
                        new
                        {
                            FeedbackRequestId = 12,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(110),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "d34e5684-030b-4bf1-ba0b-51c424468294",
                            ResolutionId = 2,
                            Resolved = false
                        },
                        new
                        {
                            FeedbackRequestId = 13,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(110),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "c5955b95-5492-4c7b-a3cb-c749c85e3a16",
                            ResolutionId = 2,
                            Resolved = false
                        },
                        new
                        {
                            FeedbackRequestId = 14,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(120),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "5559d343-5062-4cd1-b0ae-25301e70a10d",
                            ResolutionId = 2,
                            Resolved = false
                        },
                        new
                        {
                            FeedbackRequestId = 15,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(120),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "37c1ba03-d67c-437e-ac19-2b38b123c55a",
                            ResolutionId = 3,
                            Resolved = false
                        },
                        new
                        {
                            FeedbackRequestId = 16,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(120),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "221fedc9-3ad4-492e-bfc0-20f198923a24",
                            ResolutionId = 3,
                            Resolved = false
                        },
                        new
                        {
                            FeedbackRequestId = 17,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(120),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "d34e5684-030b-4bf1-ba0b-51c424468294",
                            ResolutionId = 3,
                            Resolved = true
                        },
                        new
                        {
                            FeedbackRequestId = 18,
                            Accepted = false,
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(120),
                            Description = "",
                            ESignature = "",
                            OwnerUserID = "c5955b95-5492-4c7b-a3cb-c749c85e3a16",
                            ResolutionId = 3,
                            Resolved = false
                        });
                });

            modelBuilder.Entity("ResolutionManagement.Models.Resolution", b =>
                {
                    b.Property<int?>("ResolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ResolutionId"), 1L, 1);

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResolutionId");

                    b.ToTable("Resolution", (string)null);

                    b.HasData(
                        new
                        {
                            ResolutionId = 0,
                            Abstract = "Lets create a new campus in surrey",
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(10),
                            OwnerUserID = "221fedc9-3ad4-492e-bfc0-20f198923a24",
                            Status = "Accepted"
                        },
                        new
                        {
                            ResolutionId = 1,
                            Abstract = "Lets rebuild the Tech building",
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(40),
                            OwnerUserID = "221fedc9-3ad4-492e-bfc0-20f198923a24",
                            Status = "Rejected"
                        },
                        new
                        {
                            ResolutionId = 2,
                            Abstract = "Lets create more bathooms",
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(50),
                            OwnerUserID = "37c1ba03-d67c-437e-ac19-2b38b123c55a",
                            Status = "Draft"
                        },
                        new
                        {
                            ResolutionId = 3,
                            Abstract = "Replace the mascot with a more appropiate candidate",
                            CreationDate = new DateTime(2022, 11, 19, 19, 29, 30, 828, DateTimeKind.Local).AddTicks(50),
                            OwnerUserID = "5559d343-5062-4cd1-b0ae-25301e70a10d",
                            Status = "In Progress"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResolutionManagement.Models.FeedbackRequest", b =>
                {
                    b.HasOne("ResolutionManagement.Models.Resolution", "Resolution")
                        .WithMany()
                        .HasForeignKey("ResolutionId");

                    b.Navigation("Resolution");
                });
#pragma warning restore 612, 618
        }
    }
}
